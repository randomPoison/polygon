property surface_diffuse: Texture2d;
property surface_color: Color;
property surface_specular: Color;
property surface_shininess: f32;

program frag {
    vec4 surface_diffuse_sampled = texture(surface_diffuse, @vertex.uv0) * surface_color;

    vec4 ambient = global_ambient * surface_diffuse_sampled;
    vec4 diffuse = vec4(0, 0, 0, 1);
    vec4 specular = vec4(0, 0, 0, 1);

    // Vertex normal in view space.
    vec3 n = normalize(@vertex.view_normal);

    // Direction from vertex to camera in view space.
    vec3 v = normalize(-@vertex.view_position.xyz);

    for (int index = 0; index < 8; index += 1) {
        // Direction from vertex to light in view space.
        vec3 l;

        // Distance-based attenuation of the light. Doesn't apply for directional lights.
        float attenuation;

        // Handle calculation specific to the current light type.
        if (light_type[index] == 0) {
            // NOTE: We don't calculate diffuse or specular if there is not light.
        } else if (light_type[index] == 1) {
            // Point light.
            vec3 light_offset = (light_position_view[index] - @vertex.view_position).xyz;
            float dist = length(light_offset);
            l = normalize(light_offset);
            attenuation = pow(clamp(1.0 - (dist / light_radius[index]), 0, 1), 2.0);
        } else if (light_type[index] == 2) {
            // Directional light.
            l = -light_direction_view[index];
            attenuation = 1;
        }

        if (light_type[index] != 0) {
            // Calculate diffuse color.
            float l_dot_n = dot(l, n);
            diffuse += max(l_dot_n, 0) * surface_diffuse_sampled * light_color[index] * attenuation * light_strength[index];

            // Calculate specular color.
            // Specular defaults to black for
            if (l_dot_n > 0) {
                vec3 r = normalize(reflect(-l, n));
                float r_dot_v = clamp(dot(r, v), 0.0, 1.0);
                float shine = pow(r_dot_v, surface_shininess);
                specular += surface_specular * shine * attenuation * light_strength[index] * light_color[index];
            }
        }
    }

    @color = ambient + diffuse + specular;
}
